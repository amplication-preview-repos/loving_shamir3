/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SensorService } from "../sensor.service";
import { SensorCreateInput } from "./SensorCreateInput";
import { Sensor } from "./Sensor";
import { SensorFindManyArgs } from "./SensorFindManyArgs";
import { SensorWhereUniqueInput } from "./SensorWhereUniqueInput";
import { SensorUpdateInput } from "./SensorUpdateInput";
import { DataPointFindManyArgs } from "../../dataPoint/base/DataPointFindManyArgs";
import { DataPoint } from "../../dataPoint/base/DataPoint";
import { DataPointWhereUniqueInput } from "../../dataPoint/base/DataPointWhereUniqueInput";
import { DeviceFindManyArgs } from "../../device/base/DeviceFindManyArgs";
import { Device } from "../../device/base/Device";
import { DeviceWhereUniqueInput } from "../../device/base/DeviceWhereUniqueInput";

export class SensorControllerBase {
  constructor(protected readonly service: SensorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sensor })
  async createSensor(@common.Body() data: SensorCreateInput): Promise<Sensor> {
    return await this.service.createSensor({
      data: {
        ...data,

        device: data.device
          ? {
              connect: data.device,
            }
          : undefined,

        farm: data.farm
          ? {
              connect: data.farm,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        device: {
          select: {
            id: true,
          },
        },

        farm: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Sensor] })
  @ApiNestedQuery(SensorFindManyArgs)
  async sensors(@common.Req() request: Request): Promise<Sensor[]> {
    const args = plainToClass(SensorFindManyArgs, request.query);
    return this.service.sensors({
      ...args,
      select: {
        createdAt: true,

        device: {
          select: {
            id: true,
          },
        },

        farm: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sensor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sensor(
    @common.Param() params: SensorWhereUniqueInput
  ): Promise<Sensor | null> {
    const result = await this.service.sensor({
      where: params,
      select: {
        createdAt: true,

        device: {
          select: {
            id: true,
          },
        },

        farm: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sensor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSensor(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() data: SensorUpdateInput
  ): Promise<Sensor | null> {
    try {
      return await this.service.updateSensor({
        where: params,
        data: {
          ...data,

          device: data.device
            ? {
                connect: data.device,
              }
            : undefined,

          farm: data.farm
            ? {
                connect: data.farm,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          device: {
            select: {
              id: true,
            },
          },

          farm: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sensor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSensor(
    @common.Param() params: SensorWhereUniqueInput
  ): Promise<Sensor | null> {
    try {
      return await this.service.deleteSensor({
        where: params,
        select: {
          createdAt: true,

          device: {
            select: {
              id: true,
            },
          },

          farm: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/dataPoints")
  @ApiNestedQuery(DataPointFindManyArgs)
  async findDataPoints(
    @common.Req() request: Request,
    @common.Param() params: SensorWhereUniqueInput
  ): Promise<DataPoint[]> {
    const query = plainToClass(DataPointFindManyArgs, request.query);
    const results = await this.service.findDataPoints(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dataPoints")
  async connectDataPoints(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() body: DataPointWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dataPoints: {
        connect: body,
      },
    };
    await this.service.updateSensor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dataPoints")
  async updateDataPoints(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() body: DataPointWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dataPoints: {
        set: body,
      },
    };
    await this.service.updateSensor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dataPoints")
  async disconnectDataPoints(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() body: DataPointWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dataPoints: {
        disconnect: body,
      },
    };
    await this.service.updateSensor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/devices")
  @ApiNestedQuery(DeviceFindManyArgs)
  async findDevices(
    @common.Req() request: Request,
    @common.Param() params: SensorWhereUniqueInput
  ): Promise<Device[]> {
    const query = plainToClass(DeviceFindManyArgs, request.query);
    const results = await this.service.findDevices(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        model: true,
        name: true,

        sensor: {
          select: {
            id: true,
          },
        },

        serialNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/devices")
  async connectDevices(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() body: DeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      devices: {
        connect: body,
      },
    };
    await this.service.updateSensor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/devices")
  async updateDevices(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() body: DeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      devices: {
        set: body,
      },
    };
    await this.service.updateSensor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/devices")
  async disconnectDevices(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() body: DeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      devices: {
        disconnect: body,
      },
    };
    await this.service.updateSensor({
      where: params,
      data,
      select: { id: true },
    });
  }
}
