/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  ValidateNested,
  IsOptional,
  IsString,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { DataPoint } from "../../dataPoint/base/DataPoint";
import { Device } from "../../device/base/Device";
import { Farm } from "../../farm/base/Farm";
import { EnumSensorTypeField } from "./EnumSensorTypeField";

@ObjectType()
class Sensor {
  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [DataPoint],
  })
  @ValidateNested()
  @Type(() => DataPoint)
  @IsOptional()
  dataPoints?: Array<DataPoint>;

  @ApiProperty({
    required: false,
    type: () => Device,
  })
  @ValidateNested()
  @Type(() => Device)
  @IsOptional()
  device?: Device | null;

  @ApiProperty({
    required: false,
    type: () => [Device],
  })
  @ValidateNested()
  @Type(() => Device)
  @IsOptional()
  devices?: Array<Device>;

  @ApiProperty({
    required: false,
    type: () => Farm,
  })
  @ValidateNested()
  @Type(() => Farm)
  @IsOptional()
  farm?: Farm | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumSensorTypeField,
  })
  @IsEnum(EnumSensorTypeField)
  @IsOptional()
  @Field(() => EnumSensorTypeField, {
    nullable: true,
  })
  typeField?: "Option1" | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Sensor as Sensor };
