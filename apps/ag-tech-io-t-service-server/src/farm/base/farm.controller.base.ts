/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FarmService } from "../farm.service";
import { FarmCreateInput } from "./FarmCreateInput";
import { Farm } from "./Farm";
import { FarmFindManyArgs } from "./FarmFindManyArgs";
import { FarmWhereUniqueInput } from "./FarmWhereUniqueInput";
import { FarmUpdateInput } from "./FarmUpdateInput";
import { SensorFindManyArgs } from "../../sensor/base/SensorFindManyArgs";
import { Sensor } from "../../sensor/base/Sensor";
import { SensorWhereUniqueInput } from "../../sensor/base/SensorWhereUniqueInput";

export class FarmControllerBase {
  constructor(protected readonly service: FarmService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Farm })
  async createFarm(@common.Body() data: FarmCreateInput): Promise<Farm> {
    return await this.service.createFarm({
      data: {
        ...data,

        device: data.device
          ? {
              connect: data.device,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        device: {
          select: {
            id: true,
          },
        },

        id: true,
        location: true,
        name: true,
        size: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Farm] })
  @ApiNestedQuery(FarmFindManyArgs)
  async farms(@common.Req() request: Request): Promise<Farm[]> {
    const args = plainToClass(FarmFindManyArgs, request.query);
    return this.service.farms({
      ...args,
      select: {
        createdAt: true,

        device: {
          select: {
            id: true,
          },
        },

        id: true,
        location: true,
        name: true,
        size: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Farm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async farm(
    @common.Param() params: FarmWhereUniqueInput
  ): Promise<Farm | null> {
    const result = await this.service.farm({
      where: params,
      select: {
        createdAt: true,

        device: {
          select: {
            id: true,
          },
        },

        id: true,
        location: true,
        name: true,
        size: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Farm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFarm(
    @common.Param() params: FarmWhereUniqueInput,
    @common.Body() data: FarmUpdateInput
  ): Promise<Farm | null> {
    try {
      return await this.service.updateFarm({
        where: params,
        data: {
          ...data,

          device: data.device
            ? {
                connect: data.device,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          device: {
            select: {
              id: true,
            },
          },

          id: true,
          location: true,
          name: true,
          size: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Farm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFarm(
    @common.Param() params: FarmWhereUniqueInput
  ): Promise<Farm | null> {
    try {
      return await this.service.deleteFarm({
        where: params,
        select: {
          createdAt: true,

          device: {
            select: {
              id: true,
            },
          },

          id: true,
          location: true,
          name: true,
          size: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/sensors")
  @ApiNestedQuery(SensorFindManyArgs)
  async findSensors(
    @common.Req() request: Request,
    @common.Param() params: FarmWhereUniqueInput
  ): Promise<Sensor[]> {
    const query = plainToClass(SensorFindManyArgs, request.query);
    const results = await this.service.findSensors(params.id, {
      ...query,
      select: {
        createdAt: true,

        device: {
          select: {
            id: true,
          },
        },

        farm: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sensors")
  async connectSensors(
    @common.Param() params: FarmWhereUniqueInput,
    @common.Body() body: SensorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sensors: {
        connect: body,
      },
    };
    await this.service.updateFarm({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sensors")
  async updateSensors(
    @common.Param() params: FarmWhereUniqueInput,
    @common.Body() body: SensorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sensors: {
        set: body,
      },
    };
    await this.service.updateFarm({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sensors")
  async disconnectSensors(
    @common.Param() params: FarmWhereUniqueInput,
    @common.Body() body: SensorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sensors: {
        disconnect: body,
      },
    };
    await this.service.updateFarm({
      where: params,
      data,
      select: { id: true },
    });
  }
}
